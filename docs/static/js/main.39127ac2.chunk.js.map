{"version":3,"sources":["App.js","index.js"],"names":["renderNode","nodeDatum","toggleNode","title","attributes","Description","r","fill","children","onClick","undefined","height","width","y","style","fontSize","fontWeight","name","App","useState","gscData","filtered","setFiltered","filterVal","setFilterVal","allExpanded","setAllExpanded","margin","type","onChange","e","targetVal","target","value","filterDeep","includes","description","length","childrenPath","prevAllExpanded","border","data","collapsible","initialDepth","renderCustomNodeElement","translate","x","zoom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2n7xFAKMA,EAAa,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAC/B,OACE,oBAAGC,MAAOF,EAAUG,YAAcH,EAAUG,WAAWC,YAAvD,UACE,wBACEC,EAAG,GACHC,KAAMN,EAAUO,SAAW,MAAQ,UACnCC,QAASR,EAAUO,SAAWN,OAAaQ,IAE7C,+BAAeC,OAAQ,GAAIC,MAAO,IAAKC,EAAG,GAA1C,SACE,qBACEC,MAAO,CAAEC,SAAU,QAASC,WAAY,QACxCb,MAAOF,EAAUG,YAAcH,EAAUG,WAAWC,YAFtD,SAIGJ,EAAUgB,aA2ENC,MApEf,WAAgB,IAAD,EACmBC,mBAASC,GAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBH,mBAAS,IAF9B,mBAENI,EAFM,KAEKC,EAFL,OAGyBL,oBAAS,GAHlC,mBAGNM,EAHM,KAGOC,EAHP,KAmCb,OACE,sBAAKZ,MAAO,CAAEa,OAAQ,IAAtB,qBACU,uBAAOC,KAAK,OAAOC,SAhCZ,SAACC,GAClB,IAAMC,EAAYD,EAAEE,OAAOC,MACrBZ,EAAWa,YACfd,GACA,SAACa,GACC,SACGA,EAAMhB,MAAQgB,EAAMhB,KAAKkB,SAASJ,IAClCE,EAAMG,aAAeH,EAAMG,YAAYD,SAASJ,QAK/CE,EAAMzB,WAAYyB,EAAMzB,SAAS6B,cAArC,IAMF,CAAEC,aAAc,aAElBd,EAAaO,GACbT,EAAYD,GACZK,GAAe,IAUoCO,MAAOV,IAD1D,OAGE,wBAAQd,QATE,WACZe,EAAa,IACbF,EAAYF,GACZM,GAAe,IAMb,mBACA,uBACA,wBACEjB,QAAS,kBAAMiB,GAAe,SAACa,GAAD,OAAsBA,MADtD,SAGGd,EAAc,eAAiB,cAElC,qBACEX,MAAO,CACL0B,OAAQ,kBACR7B,OAAQ,IACRgB,OAAQ,GACRf,MAAO,KALX,SAQE,cAAC,IAAD,CAEE6B,KAAMpB,EACNqB,aAAa,EACbC,aAAelB,OAAkBf,EAAJ,EAC7BkC,wBAAyB5C,EACzB6C,UAAW,CAAEC,EAAG,GAAIjC,EAAG,KACvBkC,KAAM,IAPR,UACUxB,EADV,YACuBE,UC3E/BuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.39127ac2.chunk.js","sourcesContent":["import { useState } from 'react';\nimport Tree from 'react-d3-tree';\nimport { filterDeep } from 'deepdash-es/standalone';\nimport gscData from './data/gsc.json';\n\nconst renderNode = ({ nodeDatum, toggleNode }) => {\n  return (\n    <g title={nodeDatum.attributes && nodeDatum.attributes.Description}>\n      <circle\n        r={15}\n        fill={nodeDatum.children ? '666' : '  white'}\n        onClick={nodeDatum.children ? toggleNode : undefined}\n      />\n      <foreignObject height={50} width={100} y={20}>\n        <div\n          style={{ fontSize: '.67em', fontWeight: 'bold' }}\n          title={nodeDatum.attributes && nodeDatum.attributes.Description}\n        >\n          {nodeDatum.name}\n        </div>\n      </foreignObject>\n    </g>\n  );\n};\n\nfunction App() {\n  const [filtered, setFiltered] = useState(gscData);\n  const [filterVal, setFilterVal] = useState('');\n  const [allExpanded, setAllExpanded] = useState(false);\n\n  const filterData = (e) => {\n    const targetVal = e.target.value;\n    const filtered = filterDeep(\n      gscData,\n      (value) => {\n        if (\n          (value.name && value.name.includes(targetVal)) ||\n          (value.description && value.description.includes(targetVal))\n        ) {\n          return true;\n        }\n\n        if (value.children && value.children.length) {\n          return undefined;\n        }\n\n        return false;\n      },\n      { childrenPath: 'children' }\n    );\n    setFilterVal(targetVal);\n    setFiltered(filtered);\n    setAllExpanded(true);\n  };\n\n  const clear = () => {\n    setFilterVal('');\n    setFiltered(gscData);\n    setAllExpanded(false);\n  };\n  return (\n    <div style={{ margin: 20 }}>\n      Filter: <input type=\"text\" onChange={filterData} value={filterVal} />\n      &nbsp;\n      <button onClick={clear}>Clear</button>\n      <br />\n      <button\n        onClick={() => setAllExpanded((prevAllExpanded) => !prevAllExpanded)}\n      >\n        {allExpanded ? 'Collapse All' : 'ExpandAll'}\n      </button>\n      <div\n        style={{\n          border: '1px solid black',\n          height: 750,\n          margin: 30,\n          width: 750,\n        }}\n      >\n        <Tree\n          key={`${filterVal}-${allExpanded}`}\n          data={filtered}\n          collapsible={true}\n          initialDepth={!allExpanded ? 2 : undefined}\n          renderCustomNodeElement={renderNode}\n          translate={{ x: 50, y: 375 }}\n          zoom={0.2}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}